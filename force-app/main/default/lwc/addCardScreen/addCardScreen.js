import { LightningElement, track, wire, api } from 'lwc';
import { getRecord } from 'lightning/uiRecordApi';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import getGlobalPaymentCardController from '@salesforce/apex/CardRegistrationController.globalPaymentCardAuthentication';
import getAuthorizeNetCardController from '@salesforce/apex/CardRegistrationController.authorizeNetCardAuthentication';
import getStripeCardController from '@salesforce/apex/CardRegistrationController.stripeCardAuthentication';
import getCustomSettingDataChecker from '@salesforce/apex/CustomSettingController.getCustomSettingDataChecker';



export default class AddCardScreen extends LightningElement {

    @track customSettingNames = [];
    @track outputCardNumber = 'XXXX-XXXX-XXXX-XXXX';
    @api recordId;
    @api isInputDisabled = false;
    @track outputMMYY = 'MM/YY';
    @track outputCVV = 'CVV';
    @track currentStepRequestIndicator = "1";
    @track accountName;
    error = false;
    account;
    resultdata;
    barControllerArray = [];
    @track loader=false;
    
    connectedCallback() {
                // Call a function to load custom setting data when the component is connected to the DOM
        this.loadCustomSettingData();
        this.barControllerArray = [
            ['Global Payment', '1', 'false'],
            ['Authorize.Net', '1', 'false'],
            ['Stripe', '1', 'false']
        ];
        
        console.log("Progress Bar Array Initial  "+this.barControllerArray);
         
    }

    renderedCallback() {
                // Add a click event listener to the component's template
        this.template.addEventListener('click', (event) => {
            // Get the class list of the clicked element
            const clickedElementClassList = event.target.classList;

            // Log the selected class for debugging purposes
            console.log('Selected Class: ' + clickedElementClassList.toString());

            // Check if the clicked element has the 'slds-is-open' or 'dropdown-button-text' class
            const hasOpenClass = clickedElementClassList.contains('slds-is-open');
            const hasButtonTextClass = (clickedElementClassList.contains('dropdown-button-text') || clickedElementClassList.contains('slds-custom-button'));
            // If the clicked element does not have the specified classes, close any open dropdown
            if (!(hasOpenClass || hasButtonTextClass)) {
                const openDropdown = this.template.querySelector('.slds-is-open');

                // Check if an open dropdown exists before attempting to remove the class
                if (openDropdown) {
                    openDropdown.classList.remove('slds-is-open');
                }
            }
        });
        
    }


    loadCustomSettingData() {
        console.log("In getCustomSettingDataChecker");
        
        // Call the getCustomSettingDataChecker function to retrieve custom setting data
        getCustomSettingDataChecker()
        .then(result => {
            console.log("result of getCustomSettingDataChecker : "+result);
            // Update the component property with the retrieved custom setting data
            this.customSettingNames = result;
            console.log("this.customSettingNames : "+this.customSettingNames);
            console.log("this.customSettingNames.length : "+this.customSettingNames.length);
            // Call a function to filter the <li> elements based on the custom setting data
        this.filterLiElements();
            
        })
        .catch(error => {
            // Log an error message if there's an issue retrieving custom setting data
            console.error('Error retrieving custom setting data', error);
            // Call a function to filter the <li> elements based on the custom setting data
        this.filterLiElements();
        });
        
        }
        
     

    clearErrors() {
        console.log('In Clear errors');

        // Clear custom validation messages for card input fields
        this.template.querySelector('.card-cvv').setCustomValidity('');
        this.template.querySelector('.expiry-data').setCustomValidity('');
        this.template.querySelector('.card-number-input').setCustomValidity('');

        // Report validity to trigger revalidation and update UI
        this.template.querySelector('.card-cvv').reportValidity();
        this.template.querySelector('.expiry-data').reportValidity();
        this.template.querySelector('.card-number-input').reportValidity();
    }
    
    filterLiElements() {

        console.log("In filterLiElements ");

        // Get all <li> elements with the class 'li-elements'
        const liElements = this.template.querySelectorAll('.li-elements');

        liElements.forEach(liElement => {
            // Get the text content of the <li> element and trim any leading or trailing spaces
            const liText = liElement.innerText.trim();

            // Check if the custom setting names include the text of the current <li> element
            const shouldDisplay = this.customSettingNames.includes(liText);

            // Set the display style based on whether the <li> element should be displayed or not
            liElement.style.display = shouldDisplay ? 'block' : 'none';

            // Check if there are visible <li> elements
            const visibleLiElements = this.template.querySelectorAll('.slds-box_xx-small li[style*="display: block"]');
            let firstLiValue = null;

            if (visibleLiElements.length > 0) {
                // Get the text content of the first visible <li> element
                const firstLi = visibleLiElements[0];
                firstLiValue = firstLi.textContent.trim();
                console.log('firstLiValue' + firstLiValue);

                // Replace SVG based on the first visible <li> element's text content
                if (firstLiValue === 'Authorize.net') {
                    this.replacetoAuthSVG();
                } else if (firstLiValue === 'Global Payments') {
                    this.replacetoGPSVG();
                } else if (firstLiValue === 'Stripe') {
                    this.replacetoStripeSVG();
                }

                console.log(this.customSettingNames);
            }

            // If there are no custom setting names, display a message in the main container
            if (this.customSettingNames.length === 0) {
                console.log('Nothing in List');
                const updateMain = this.template.querySelector('.main');
                updateMain.innerHTML = '<div style="display: flex; flex-direction: column; align-items: center; font-size: large;">   <div><span >To proceed with adding a new card, please <span style="font-weight: 600;">add at least one merchant</span> first.</span></div> <br><b>Or</b><br><span>You do not have sufficicent Permissions. Please ask your system administrator.</span></div>      ';
            }
        });
    }


    // Use wire service to get the Account record
    @wire(getRecord, { recordId: '$recordId', fields: ['Account.Id', 'Account.Name'] })
    wiredAccount({ error, data }) {
        this.loader=true;
                if (data) {
            this.account = data;
            console.log(data);
            console.log('Account Id:', this.account.fields.Id.value);
            console.log('Account Name:', this.account.fields.Name.value);
            this.accountName = this.account.fields.Name.value;



        } else if (error) {
            console.error('Error loading account data', error);
        }
        this.loader=false;
    }

    //This function replaces logos with Global Payment logo and changes the text of dropdown button
    replacetoGPSVG() {
        const gpSVG = '<svg  viewBox="0 0 172 25" class="top-logo-width-set" height="100%" width="100%">  <path fill-rule="evenodd" clip-rule="evenodd" d="M18.5213 19.8198H15.0973V0H18.5213V19.8198ZM13.397 4.49743C13.397 5.47882 12.5914 6.27415 11.5973 6.27415C10.6032 6.27415 9.79757 5.47882 9.79757 4.49743C9.79757 3.51604 10.6032 2.7213 11.5973 2.7213C12.5914 2.7213 13.397 3.51604 13.397 4.49743ZM6.7732 12.4373C8.17694 12.4373 9.11337 11.541 9.11337 10.154C9.11337 8.76762 8.14959 7.81675 6.69055 7.81675C5.36885 7.81675 4.43302 8.74062 4.43302 10.2086C4.43302 11.622 5.31416 12.4373 6.7732 12.4373ZM3.71758 20.9723C3.71758 21.8962 4.7634 22.5495 6.52566 22.5495C8.92113 22.5495 10.2702 21.7882 10.2702 20.7822C10.2702 19.9939 9.63697 19.6945 8.34322 19.6405L5.17662 19.4773C4.18549 19.9393 3.71758 20.3742 3.71758 20.9723ZM1.07401 16.5959C1.07401 15.5898 1.8172 14.612 3.22154 13.9047C1.90044 13.117 1.21194 11.8392 1.21194 10.181C1.21194 7.27266 3.41418 5.23475 6.69077 5.23475C8.03506 5.23475 9.37341 5.66264 10.402 6.52957C11.0816 7.10186 11.6161 7.85199 11.9086 8.68664C12.1072 9.25188 12.1696 9.85762 12.1696 10.4534C12.1696 13.1986 10.1321 14.9929 6.77342 14.9929C6.16757 14.9929 5.64436 14.9383 5.20379 14.8291C4.57059 15.0739 4.26796 15.4002 4.26796 15.7806C4.26796 16.5903 5.22515 16.6523 7.03729 16.7696L7.03758 16.7696L7.03854 16.7697L7.03874 16.7697C7.35561 16.7902 7.6986 16.8124 8.06717 16.8406C11.7843 17.1124 13.3534 17.8191 13.3534 20.5373C13.3534 23.3371 11.0132 24.9406 6.58078 24.9406C2.53364 24.9406 0.46875 23.6898 0.46875 21.3796C0.46875 20.0478 1.26664 19.3141 2.97361 18.7705C1.67986 18.146 1.07401 17.5743 1.07401 16.5959ZM26.6124 17.2032C28.4627 17.2032 29.3462 15.7036 29.3462 12.6778C29.3462 9.65146 28.4627 8.17937 26.6124 8.17937C24.7901 8.17937 23.8786 9.65146 23.8786 12.6778C23.8786 15.7036 24.7901 17.2032 26.6124 17.2032ZM26.6125 5.26145C30.4789 5.26145 32.7982 7.98845 32.7982 12.6776C32.7982 17.3663 30.4509 20.0933 26.6125 20.0933C22.774 20.0933 20.4267 17.3393 20.4267 12.6776C20.4267 7.98845 22.7467 5.26145 26.6125 5.26145ZM43.6789 12.6775C43.6789 15.6487 42.519 17.2576 40.6134 17.2576C39.6746 17.2576 38.9011 16.8485 38.0449 16.0308V9.24209C38.929 8.45146 39.702 8.04235 40.6408 8.04235C42.491 8.04235 43.6789 9.6782 43.6789 12.6775ZM34.7035 0.000946027V16.4944C34.7035 17.1759 34.6482 18.294 34.5376 19.8201H37.1887L37.5484 18.294C38.7357 19.5478 39.9231 20.0931 41.4695 20.0931C44.7556 20.0931 47.1029 17.1219 47.1029 12.6774C47.1029 8.07042 44.7003 5.26184 41.5801 5.26184C40.1163 5.26184 39.0669 5.75253 38.0728 6.89827V0.000946027H34.7035ZM51.493 15.8945C51.493 16.8489 52.0454 17.4218 53.0395 17.4218C54.1168 17.4218 55.1662 16.9305 56.2156 15.9215V12.8681C53.0121 13.3043 51.493 14.2041 51.493 15.8945ZM56.2983 18.5662C54.9731 19.52 53.5366 19.9837 51.9902 19.9837C49.5602 19.9837 48.1244 18.5386 48.1244 16.1668C48.1244 12.9772 50.8029 11.2868 56.3257 10.6053V9.48778C56.3257 8.4518 55.6081 7.85193 54.2822 7.85193C52.9569 7.85193 51.8796 8.42422 51.1067 9.48778L48.7867 8.0427C50.002 6.1885 51.8522 5.2617 54.3381 5.2617C57.7342 5.2617 59.6397 6.87054 59.6397 9.48778V17.8848C59.6397 18.3761 59.723 19.0299 59.8609 19.82H56.6022L56.2983 18.5662ZM65.9627 19.8198H62.5386V0H65.9627V19.8198ZM70.9216 16.003C72.3575 17.8026 73.6554 18.7024 75.2571 18.7024C77.6324 18.7024 79.0403 16.6029 79.0403 12.7043C79.0403 8.80578 77.6324 6.70682 75.2571 6.70682C73.6554 6.70682 72.3575 7.57904 70.9216 9.37806V16.003ZM69.2092 5.56165H70.4798L70.9215 7.41526H71.0595C72.4127 5.99776 73.8485 5.28872 75.395 5.28872C78.5432 5.28872 80.7525 7.98754 80.7525 12.6773C80.7525 17.3665 78.5432 20.0653 75.395 20.0653C73.8485 20.0653 72.4127 19.3839 71.0595 17.9658H70.9215V24.9999H69.2092V5.56165ZM83.569 16.1942C83.569 13.7677 85.8057 12.8679 90.6662 11.805V16.1942C88.9818 17.8841 87.546 18.7299 85.9716 18.7299C84.4805 18.7299 83.569 17.7755 83.569 16.1942ZM85.7509 20.0921C87.5179 20.0921 89.0917 19.3843 90.6661 17.9386C90.6941 18.539 90.8041 19.1659 90.9426 19.8198H92.627C92.4611 18.9206 92.3784 18.2661 92.3784 17.911V9.05148C92.3784 6.92494 90.4729 5.3155 87.7391 5.3155C85.2533 5.3155 83.7348 6.26989 82.6021 8.23326L83.928 8.99689C84.7842 7.46963 85.9436 6.706 87.5179 6.706C89.5061 6.706 90.6941 7.66039 90.6941 9.05148V10.4414C84.6456 11.5044 81.8566 12.977 81.8566 16.2752C81.8566 18.4845 83.3757 20.0921 85.7509 20.0921ZM93.896 5.56181H95.6083L99.8612 17.6936L104.086 5.56181H105.716L100.275 20.9383C99.2809 23.7727 98.1209 24.9449 95.6357 24.9449C95.1939 24.9449 94.6969 24.9185 94.1445 24.8363V23.4734C94.5863 23.555 95.0007 23.5825 95.3598 23.5825C97.4306 23.5825 98.3694 22.4374 98.9218 19.738L93.896 5.56181ZM109.002 5.56175H107.427V19.8201H109.084V9.43272C110.52 7.66129 111.929 6.78849 113.254 6.78849C115.297 6.78849 115.739 7.98822 115.739 10.4963V19.8201H117.396V9.43272C118.805 7.66129 120.241 6.78849 121.566 6.78849C123.61 6.78849 124.052 7.98822 124.052 10.4963V19.8201H125.681V9.89642C125.681 6.84307 124.466 5.3164 122.036 5.3164C120.49 5.3164 118.971 6.13403 117.396 7.76988H117.204C116.541 6.13403 115.381 5.3164 113.752 5.3164C112.233 5.3164 110.631 6.13403 109.112 7.76988H109.002V5.56175ZM133.745 6.67928C131.48 6.67928 129.878 8.36972 129.603 11.4231H137.529C137.445 8.34213 136.009 6.67928 133.745 6.67928ZM139.213 16.3847C137.942 18.9473 136.313 20.0655 133.772 20.0655C130.183 20.0655 127.89 17.2569 127.89 12.7855C127.89 8.06986 130.265 5.28886 133.717 5.28886C137.197 5.28886 139.13 7.66075 139.13 12.1862V12.6499H129.602C129.63 16.6024 131.149 18.702 133.883 18.702C135.733 18.702 136.921 17.8028 137.942 15.7032L139.213 16.3847ZM143.078 5.56175H141.366V19.8201H143.078V9.43272C144.625 7.66129 146.142 6.78849 147.579 6.78849C149.788 6.78849 150.286 7.98822 150.286 10.4963V19.8201H151.971V9.89642C151.971 6.84307 150.672 5.3164 148.077 5.3164C146.474 5.3164 144.79 6.13403 143.078 7.79746V5.56175ZM159.011 18.7567C159.398 18.7567 159.896 18.6475 160.53 18.4837V19.8472C159.896 20.0116 159.233 20.1196 158.596 20.1196C156.608 20.1196 155.752 19.1382 155.752 17.0662V6.95239H153.599V5.56189H155.752V1.3358H157.437V5.56189H160.447V6.95239H157.437V17.1484C157.437 18.2384 157.935 18.7567 159.011 18.7567ZM169.589 16.1124C169.589 17.6115 168.401 18.7297 166.606 18.7297C164.921 18.7297 163.485 17.8845 162.243 16.248L160.972 17.257C162.408 19.1658 164.147 20.065 166.413 20.065C169.394 20.065 171.328 18.3482 171.328 15.9763C171.328 13.713 169.865 12.8407 166.992 11.7772C166.761 11.6908 166.539 11.6094 166.327 11.5315C164.332 10.799 163.181 10.3767 163.181 8.99677C163.181 7.60627 164.203 6.65246 165.777 6.65246C167.379 6.65246 168.567 7.33392 169.671 8.77842L170.886 7.9062C169.616 6.18877 167.959 5.28896 166.08 5.28896C163.209 5.28896 161.414 6.89722 161.414 9.07835C161.414 11.2589 162.933 12.0777 165.86 13.1407C166.005 13.1941 166.147 13.2456 166.284 13.2957C168.396 14.0645 169.589 14.499 169.589 16.1124Z" fill="#003C71"/></svg>';

        console.log("In function for svgContainer");

        // Get the main-top-logo container element
        const mainTopLogo = this.template.querySelector('.main-top-logo');
        mainTopLogo.innerHTML = ''; // Clear existing content inside the div
        mainTopLogo.innerHTML = gpSVG;

        const mainDropdownText = this.template.querySelector('.dropdown-button-text');
        mainDropdownText.innerHTML = ''; // Clear existing content inside the div
        mainDropdownText.innerHTML = 'Global Payment';


        // Get the logo-svg container element
        const cardLogo = this.template.querySelector('.logo-svg');
        cardLogo.innerHTML = ''; // Clear existing content inside the div
        cardLogo.innerHTML = gpSVG;

        this.isInputDisabled = false;
    }

    //This function replaces logos with Authorize.net logo and changes the text of dropdown button
    replacetoAuthSVG() {
        const authSVG = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 493.8 60" class="top-logo-width-set" height="100%" width="100%"> <g> <path style="fill:#000000;" d="M32.4,56.2v-0.7c-1.3,1.2-2.7,2.2-4.4,2.8c-1.7,0.6-3.5,0.9-5.3,0.9c-5.4,0.1-10.6-2.1-14.3-6.1 c-3.8-4-5.9-9.3-5.8-14.9c-0.1-5.5,1.9-10.9,5.8-14.9c3.7-4,8.9-6.2,14.3-6.1c1.8,0,3.6,0.3,5.3,0.9c1.6,0.6,3.1,1.6,4.4,2.8 v-0.7c0-1,0.7-1.8,1.7-1.9h10.2c0.5,0,1,0.2,1.3,0.5c0.4,0.4,0.5,0.8,0.5,1.3v35.8c0,0.5-0.2,1-0.5,1.3c-0.3,0.4-0.8,0.6-1.3,0.6 H34.3c-0.5,0-1-0.2-1.4-0.6C32.6,57.2,32.4,56.7,32.4,56.2L32.4,56.2L32.4,56.2z M16.6,38.3c-0.1,2.2,0.8,4.3,2.3,5.8 c3,3.1,8.1,3.2,11.2,0.2c0.1-0.1,0.1-0.1,0.2-0.2c3.1-3.2,3.1-8.3,0-11.5c-3.1-3.1-8.1-3.2-11.2-0.1L19,32.6 C17.4,34.1,16.6,36.2,16.6,38.3z" /> <path class="st0" d="M70.6,47c1.5,0.1,3-0.5,4.1-1.6c1-1.3,1.5-2.9,1.4-4.6V20.2c0-0.5,0.2-0.9,0.6-1.2c0.4-0.3,0.9-0.5,1.3-0.5 h10c0.5,0,1,0.2,1.3,0.5c0.4,0.3,0.6,0.7,0.6,1.2v22.5c0.1,4.6-1.8,8.9-5.2,11.9c-3.5,3.1-8.2,4.7-14,4.7 c-5.9,0-10.6-1.6-14.3-4.7c-3.5-2.9-5.5-7.3-5.4-11.9V20.2c0-0.5,0.2-0.9,0.6-1.2c0.4-0.3,0.8-0.5,1.3-0.5h10 c0.5,0,1,0.2,1.4,0.5c0.4,0.3,0.6,0.7,0.6,1.2v20.6c-0.1,1.7,0.5,3.3,1.5,4.5C67.5,46.5,69,47.1,70.6,47z" /> <path class="st0" d="M112.6,58.9c-4.3,0-7.8-1.1-10.4-3.4c-2.6-2.3-3.9-5.4-3.9-9.4V30h-4.1c-0.5,0-1-0.2-1.3-0.6 c-0.3-0.4-0.5-0.8-0.5-1.3v-2.9c0-0.7,0.1-1.4,0.2-2c0.2-0.6,0.5-1.1,0.9-1.5l9.8-10.9c0.6-0.7,1.3-1.3,2.1-1.8 c0.7-0.3,1.4-0.4,2.2-0.4h2.7c1,0,1.9,0.8,1.9,1.8v8.2h8.7c0.5,0,1,0.2,1.3,0.5c0.4,0.4,0.6,0.8,0.6,1.3v7.7c0,0.5-0.2,1-0.6,1.4 c-0.4,0.4-0.8,0.6-1.3,0.6h-8.7v13.2c-0.1,0.8,0.2,1.7,0.8,2.3c0.6,0.6,1.3,0.9,2.1,0.8c0.6,0,1.1-0.1,1.7-0.3 c0.7-0.3,1.4-0.6,2-1c0.9-0.8,2.4-0.7,3.2,0.3c0.1,0.1,0.2,0.3,0.3,0.5l3.5,5.2c0.4,0.5,0.6,1.2,0.6,1.8c0,0.6-0.3,1.2-0.7,1.6 c-1.6,1.5-3.5,2.7-5.6,3.4C117.6,58.5,115.1,58.9,112.6,58.9z" /> <path class="st0" d="M149.3,29.4c-1.7-0.1-3.4,0.6-4.6,1.8c-1.3,1.3-1.9,3-1.8,4.7v20.3c0,1-0.7,1.8-1.7,1.9h-10.3 c-1,0.1-1.8-0.7-1.9-1.7V4c-0.1-1,0.7-1.8,1.7-1.9h10.3c1-0.1,1.8,0.7,1.9,1.7v19.5c1.2-1.9,2.9-3.4,4.8-4.4 c2.1-1,4.4-1.5,6.7-1.5c5,0,8.8,1.5,11.3,4.4c2.6,3,3.8,7.3,3.8,12.9v21.5c0.1,1-0.7,1.8-1.7,1.9h-10.3c-1,0.1-1.8-0.7-1.9-1.7 V35.9c0.2-3.3-2.3-6.3-5.6-6.5C149.8,29.4,149.5,29.4,149.3,29.4L149.3,29.4L149.3,29.4z" /> <path class="st0" d="M172.9,38.3c-0.1-5.6,2.3-11,6.4-14.8c8.7-8.2,22.3-8.2,31,0c8.2,7.7,8.6,20.6,0.8,28.8 c-0.3,0.3-0.6,0.6-0.8,0.8c-8.7,8.2-22.3,8.2-31,0C175.1,49.4,172.8,44,172.9,38.3z M186.8,38.3c-0.1,2.2,0.8,4.3,2.3,5.8 c3,3.1,8.1,3.2,11.2,0.2c0.1-0.1,0.1-0.1,0.2-0.2c3.1-3.2,3.1-8.3,0-11.5c-3.1-3.1-8.1-3.2-11.2-0.1c0,0-0.1,0.1-0.1,0.1 C187.6,34.1,186.7,36.2,186.8,38.3z" /> <path class="st0" d="M222.3,18.6h7.2c0.7,0,1.4,0.2,2,0.6c0.6,0.4,1.1,1,1.4,1.7l1.1,2.5c1.3-1.6,2.8-2.9,4.5-4 c1.4-0.9,2.9-1.3,4.6-1.4c1.3-0.1,2.6,0.3,3.7,1.1c0.8,0.8,1.2,1.9,1,3l-1.1,9c-0.1,0.9-0.4,1.7-1,2.3c-0.6,0.5-1.3,0.8-2.1,0.8 c-0.3,0-0.6,0-0.9-0.1c-0.3-0.1-0.8-0.2-1.5-0.4c-0.7-0.2-1.3-0.4-1.6-0.4c-0.4-0.1-0.7-0.1-1.1-0.1c-1.1,0-2.2,0.4-3.1,1.2 c-0.8,0.8-1.2,1.9-1.2,3v19.1c0,0.5-0.2,0.9-0.6,1.2c-0.3,0.3-0.8,0.5-1.3,0.6h-10.1c-0.5,0-1-0.2-1.3-0.5 c-0.4-0.4-0.5-0.8-0.5-1.3V20.4c0-0.5,0.2-1,0.5-1.3C221.3,18.7,221.8,18.5,222.3,18.6L222.3,18.6L222.3,18.6z" /> <path style="fill:#0075FF;" d="M265.4,8.2c0,2-0.8,3.9-2.3,5.3c-3,3-7.9,3-10.9,0c-1.5-1.4-2.3-3.3-2.3-5.3c0-2,0.8-3.9,2.3-5.3 c3-3,7.9-3,10.9,0C264.6,4.3,265.4,6.2,265.4,8.2z" /> <path class="st0" d="M303.1,29.4l-15.7,17H303c0.5,0,1,0.2,1.3,0.5c0.4,0.4,0.5,0.8,0.5,1.3v8.2c0,0.5-0.2,1-0.5,1.3 c-0.4,0.4-0.8,0.5-1.3,0.5h-32.4c-0.5,0-1-0.2-1.4-0.6c-0.4-0.4-0.6-0.8-0.6-1.3v-6.7c0-0.4,0-0.8,0.2-1.2c0.2-0.4,0.4-0.7,0.7-1 l16-17h-14.3c-0.5,0-1-0.2-1.3-0.6c-0.4-0.4-0.6-0.8-0.6-1.3v-8c0-1.1,0.8-1.9,1.9-1.9H302c0.5,0,1,0.2,1.3,0.6 c0.4,0.4,0.6,0.9,0.6,1.4v6.7C304,28,303.7,28.7,303.1,29.4C303.1,29.3,303.1,29.4,303.1,29.4z" /> <path class="st0" d="M345.8,51.7c-1.8,2.5-4.3,4.4-7.1,5.5c-3.3,1.4-6.8,2.1-10.3,2.1c-6.3,0-11.5-2-15.5-5.9 c-4-3.9-6.2-9.3-6.1-14.8c0-6.2,1.9-11.3,5.7-15.2c3.8-3.9,8.8-5.9,15-5.9c6,0,10.8,1.9,14.5,5.7c3.7,3.7,5.7,8.7,5.6,13.9v2.3 c0,0.7-0.2,1.5-0.6,2.1c-0.4,0.5-1,0.8-1.6,0.8h-24.7c0.3,1.7,1.3,3.3,2.7,4.4c1.5,1.1,3.3,1.7,5.2,1.6c1.3,0,2.6-0.2,3.8-0.7 c1.3-0.6,2.4-1.4,3.3-2.3c0.4-0.4,0.9-0.7,1.5-0.8c0.6,0,1.1,0.1,1.6,0.4l6.7,4.4c0.4,0.2,0.7,0.7,0.8,1.2 C346.2,50.7,346.1,51.3,345.8,51.7z M320.9,33.2H334c-0.2-1.5-1-2.8-2.2-3.8c-1.2-1-2.7-1.5-4.2-1.4c-1.5,0-3.1,0.5-4.3,1.4 C322.1,30.4,321.3,31.7,320.9,33.2z" /> <path style="fill:#FFC300;" d="M368.1,50.4c0,4.9-4,8.9-8.9,8.9c-4.9,0-8.9-4-8.9-8.9c0-4.9,4-8.9,8.8-8.9 C364.1,41.5,368.1,45.5,368.1,50.4L368.1,50.4L368.1,50.4z" /> <path class="st0" d="M392.6,29.4c-1.7-0.1-3.4,0.6-4.6,1.8c-1.3,1.3-1.9,3-1.8,4.7v20.3c0,1-0.7,1.8-1.7,1.9h-10.3 c-1,0.1-1.8-0.7-1.9-1.7v-36c0-1,0.7-1.8,1.7-1.9h10.2c0.5,0,1,0.2,1.3,0.5c0.4,0.4,0.5,0.8,0.5,1.3v2.9c1.2-1.9,2.9-3.4,4.8-4.4 c2.1-1,4.4-1.5,6.7-1.5c5,0,8.8,1.5,11.3,4.4c2.6,3,3.8,7.3,3.8,12.9v21.5c0.1,1-0.7,1.8-1.7,1.9h-10.3c-1,0.1-1.8-0.7-1.9-1.7 V35.9c0.1-1.8-0.6-3.5-1.8-4.7C395.9,30,394.3,29.4,392.6,29.4z" /> <path class="st0" d="M455.3,51.7c-1.8,2.5-4.3,4.4-7.1,5.5c-3.3,1.4-6.8,2.1-10.3,2.1c-6.3,0-11.5-2-15.6-5.9 c-4-3.9-6.2-9.3-6.1-14.8c0-6.2,1.9-11.3,5.7-15.2c3.8-3.9,8.8-5.9,15-5.9c6,0,10.8,1.9,14.5,5.7c3.7,3.7,5.7,8.7,5.6,13.9v2.3 c0,0.7-0.2,1.5-0.6,2.1c-0.4,0.5-1,0.8-1.6,0.8h-24.7c0.3,1.7,1.3,3.3,2.7,4.4c1.5,1.1,3.3,1.7,5.2,1.6c1.3,0,2.6-0.2,3.8-0.7 c1.3-0.6,2.4-1.4,3.3-2.3c0.8-0.9,2.1-1.1,3.1-0.3l6.7,4.4c0.4,0.2,0.7,0.7,0.8,1.2C455.7,50.7,455.6,51.3,455.3,51.7L455.3,51.7 L455.3,51.7z M430.5,33.2h13.1c-0.3-1.5-1-2.8-2.2-3.8c-1.2-1-2.7-1.5-4.2-1.4c-1.5,0-3.1,0.5-4.3,1.4 C431.7,30.4,430.8,31.7,430.5,33.2z" /> <path class="st0" d="M478.2,58.9c-4.3,0-7.8-1.1-10.4-3.4c-2.6-2.3-3.9-5.4-3.9-9.4V30h-4.1c-0.5,0-1-0.2-1.3-0.6 c-0.4-0.4-0.5-0.9-0.5-1.4v-2.9c0-0.7,0.1-1.4,0.2-2c0.2-0.6,0.5-1.1,0.9-1.5l9.8-10.9c0.6-0.7,1.3-1.3,2.1-1.8 c0.7-0.3,1.4-0.4,2.2-0.4h2.7c0.5,0,1,0.2,1.3,0.5c0.4,0.4,0.6,0.8,0.5,1.3v8.1h8.7c0.5,0,1,0.2,1.3,0.5c0.4,0.4,0.6,0.8,0.6,1.3 v7.7c0,0.5-0.2,1-0.6,1.4c-0.4,0.4-0.8,0.6-1.3,0.6h-8.7v13.2c-0.1,0.8,0.2,1.7,0.8,2.3c0.6,0.6,1.3,0.9,2.1,0.8 c0.6,0,1.1-0.1,1.7-0.3c0.7-0.3,1.4-0.6,2.1-1c0.9-0.8,2.4-0.7,3.2,0.3c0.1,0.1,0.2,0.3,0.3,0.5l3.5,5.2c0.4,0.5,0.6,1.2,0.6,1.8 c0,0.6-0.3,1.2-0.7,1.6c-1.6,1.5-3.5,2.7-5.6,3.4C483.2,58.5,480.7,58.9,478.2,58.9L478.2,58.9L478.2,58.9z" /> <path class="st0" d="M264.5,20.4v35.9c0,0.5-0.2,1-0.5,1.3c-0.4,0.4-0.9,0.6-1.4,0.5h-10c-0.5,0-1-0.2-1.4-0.5 c-0.4-0.4-0.6-0.8-0.5-1.3V20.4c0-0.5,0.2-1,0.5-1.3c0.4-0.4,0.9-0.6,1.4-0.5h10c0.5,0,1,0.2,1.4,0.5 C264.3,19.4,264.5,19.9,264.5,20.4z" /> </g></svg>';
        console.log("In function for svgContainer");
        const authcardSVG = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 493.8 60" height="75%"> <g> <path style="fill:#000000;" d="M32.4,56.2v-0.7c-1.3,1.2-2.7,2.2-4.4,2.8c-1.7,0.6-3.5,0.9-5.3,0.9c-5.4,0.1-10.6-2.1-14.3-6.1 c-3.8-4-5.9-9.3-5.8-14.9c-0.1-5.5,1.9-10.9,5.8-14.9c3.7-4,8.9-6.2,14.3-6.1c1.8,0,3.6,0.3,5.3,0.9c1.6,0.6,3.1,1.6,4.4,2.8 v-0.7c0-1,0.7-1.8,1.7-1.9h10.2c0.5,0,1,0.2,1.3,0.5c0.4,0.4,0.5,0.8,0.5,1.3v35.8c0,0.5-0.2,1-0.5,1.3c-0.3,0.4-0.8,0.6-1.3,0.6 H34.3c-0.5,0-1-0.2-1.4-0.6C32.6,57.2,32.4,56.7,32.4,56.2L32.4,56.2L32.4,56.2z M16.6,38.3c-0.1,2.2,0.8,4.3,2.3,5.8 c3,3.1,8.1,3.2,11.2,0.2c0.1-0.1,0.1-0.1,0.2-0.2c3.1-3.2,3.1-8.3,0-11.5c-3.1-3.1-8.1-3.2-11.2-0.1L19,32.6 C17.4,34.1,16.6,36.2,16.6,38.3z" /> <path class="st0" d="M70.6,47c1.5,0.1,3-0.5,4.1-1.6c1-1.3,1.5-2.9,1.4-4.6V20.2c0-0.5,0.2-0.9,0.6-1.2c0.4-0.3,0.9-0.5,1.3-0.5 h10c0.5,0,1,0.2,1.3,0.5c0.4,0.3,0.6,0.7,0.6,1.2v22.5c0.1,4.6-1.8,8.9-5.2,11.9c-3.5,3.1-8.2,4.7-14,4.7 c-5.9,0-10.6-1.6-14.3-4.7c-3.5-2.9-5.5-7.3-5.4-11.9V20.2c0-0.5,0.2-0.9,0.6-1.2c0.4-0.3,0.8-0.5,1.3-0.5h10 c0.5,0,1,0.2,1.4,0.5c0.4,0.3,0.6,0.7,0.6,1.2v20.6c-0.1,1.7,0.5,3.3,1.5,4.5C67.5,46.5,69,47.1,70.6,47z" /> <path class="st0" d="M112.6,58.9c-4.3,0-7.8-1.1-10.4-3.4c-2.6-2.3-3.9-5.4-3.9-9.4V30h-4.1c-0.5,0-1-0.2-1.3-0.6 c-0.3-0.4-0.5-0.8-0.5-1.3v-2.9c0-0.7,0.1-1.4,0.2-2c0.2-0.6,0.5-1.1,0.9-1.5l9.8-10.9c0.6-0.7,1.3-1.3,2.1-1.8 c0.7-0.3,1.4-0.4,2.2-0.4h2.7c1,0,1.9,0.8,1.9,1.8v8.2h8.7c0.5,0,1,0.2,1.3,0.5c0.4,0.4,0.6,0.8,0.6,1.3v7.7c0,0.5-0.2,1-0.6,1.4 c-0.4,0.4-0.8,0.6-1.3,0.6h-8.7v13.2c-0.1,0.8,0.2,1.7,0.8,2.3c0.6,0.6,1.3,0.9,2.1,0.8c0.6,0,1.1-0.1,1.7-0.3 c0.7-0.3,1.4-0.6,2-1c0.9-0.8,2.4-0.7,3.2,0.3c0.1,0.1,0.2,0.3,0.3,0.5l3.5,5.2c0.4,0.5,0.6,1.2,0.6,1.8c0,0.6-0.3,1.2-0.7,1.6 c-1.6,1.5-3.5,2.7-5.6,3.4C117.6,58.5,115.1,58.9,112.6,58.9z" /> <path class="st0" d="M149.3,29.4c-1.7-0.1-3.4,0.6-4.6,1.8c-1.3,1.3-1.9,3-1.8,4.7v20.3c0,1-0.7,1.8-1.7,1.9h-10.3 c-1,0.1-1.8-0.7-1.9-1.7V4c-0.1-1,0.7-1.8,1.7-1.9h10.3c1-0.1,1.8,0.7,1.9,1.7v19.5c1.2-1.9,2.9-3.4,4.8-4.4 c2.1-1,4.4-1.5,6.7-1.5c5,0,8.8,1.5,11.3,4.4c2.6,3,3.8,7.3,3.8,12.9v21.5c0.1,1-0.7,1.8-1.7,1.9h-10.3c-1,0.1-1.8-0.7-1.9-1.7 V35.9c0.2-3.3-2.3-6.3-5.6-6.5C149.8,29.4,149.5,29.4,149.3,29.4L149.3,29.4L149.3,29.4z" /> <path class="st0" d="M172.9,38.3c-0.1-5.6,2.3-11,6.4-14.8c8.7-8.2,22.3-8.2,31,0c8.2,7.7,8.6,20.6,0.8,28.8 c-0.3,0.3-0.6,0.6-0.8,0.8c-8.7,8.2-22.3,8.2-31,0C175.1,49.4,172.8,44,172.9,38.3z M186.8,38.3c-0.1,2.2,0.8,4.3,2.3,5.8 c3,3.1,8.1,3.2,11.2,0.2c0.1-0.1,0.1-0.1,0.2-0.2c3.1-3.2,3.1-8.3,0-11.5c-3.1-3.1-8.1-3.2-11.2-0.1c0,0-0.1,0.1-0.1,0.1 C187.6,34.1,186.7,36.2,186.8,38.3z" /> <path class="st0" d="M222.3,18.6h7.2c0.7,0,1.4,0.2,2,0.6c0.6,0.4,1.1,1,1.4,1.7l1.1,2.5c1.3-1.6,2.8-2.9,4.5-4 c1.4-0.9,2.9-1.3,4.6-1.4c1.3-0.1,2.6,0.3,3.7,1.1c0.8,0.8,1.2,1.9,1,3l-1.1,9c-0.1,0.9-0.4,1.7-1,2.3c-0.6,0.5-1.3,0.8-2.1,0.8 c-0.3,0-0.6,0-0.9-0.1c-0.3-0.1-0.8-0.2-1.5-0.4c-0.7-0.2-1.3-0.4-1.6-0.4c-0.4-0.1-0.7-0.1-1.1-0.1c-1.1,0-2.2,0.4-3.1,1.2 c-0.8,0.8-1.2,1.9-1.2,3v19.1c0,0.5-0.2,0.9-0.6,1.2c-0.3,0.3-0.8,0.5-1.3,0.6h-10.1c-0.5,0-1-0.2-1.3-0.5 c-0.4-0.4-0.5-0.8-0.5-1.3V20.4c0-0.5,0.2-1,0.5-1.3C221.3,18.7,221.8,18.5,222.3,18.6L222.3,18.6L222.3,18.6z" /> <path style="fill:#0075FF;" d="M265.4,8.2c0,2-0.8,3.9-2.3,5.3c-3,3-7.9,3-10.9,0c-1.5-1.4-2.3-3.3-2.3-5.3c0-2,0.8-3.9,2.3-5.3 c3-3,7.9-3,10.9,0C264.6,4.3,265.4,6.2,265.4,8.2z" /> <path class="st0" d="M303.1,29.4l-15.7,17H303c0.5,0,1,0.2,1.3,0.5c0.4,0.4,0.5,0.8,0.5,1.3v8.2c0,0.5-0.2,1-0.5,1.3 c-0.4,0.4-0.8,0.5-1.3,0.5h-32.4c-0.5,0-1-0.2-1.4-0.6c-0.4-0.4-0.6-0.8-0.6-1.3v-6.7c0-0.4,0-0.8,0.2-1.2c0.2-0.4,0.4-0.7,0.7-1 l16-17h-14.3c-0.5,0-1-0.2-1.3-0.6c-0.4-0.4-0.6-0.8-0.6-1.3v-8c0-1.1,0.8-1.9,1.9-1.9H302c0.5,0,1,0.2,1.3,0.6 c0.4,0.4,0.6,0.9,0.6,1.4v6.7C304,28,303.7,28.7,303.1,29.4C303.1,29.3,303.1,29.4,303.1,29.4z" /> <path class="st0" d="M345.8,51.7c-1.8,2.5-4.3,4.4-7.1,5.5c-3.3,1.4-6.8,2.1-10.3,2.1c-6.3,0-11.5-2-15.5-5.9 c-4-3.9-6.2-9.3-6.1-14.8c0-6.2,1.9-11.3,5.7-15.2c3.8-3.9,8.8-5.9,15-5.9c6,0,10.8,1.9,14.5,5.7c3.7,3.7,5.7,8.7,5.6,13.9v2.3 c0,0.7-0.2,1.5-0.6,2.1c-0.4,0.5-1,0.8-1.6,0.8h-24.7c0.3,1.7,1.3,3.3,2.7,4.4c1.5,1.1,3.3,1.7,5.2,1.6c1.3,0,2.6-0.2,3.8-0.7 c1.3-0.6,2.4-1.4,3.3-2.3c0.4-0.4,0.9-0.7,1.5-0.8c0.6,0,1.1,0.1,1.6,0.4l6.7,4.4c0.4,0.2,0.7,0.7,0.8,1.2 C346.2,50.7,346.1,51.3,345.8,51.7z M320.9,33.2H334c-0.2-1.5-1-2.8-2.2-3.8c-1.2-1-2.7-1.5-4.2-1.4c-1.5,0-3.1,0.5-4.3,1.4 C322.1,30.4,321.3,31.7,320.9,33.2z" /> <path style="fill:#FFC300;" d="M368.1,50.4c0,4.9-4,8.9-8.9,8.9c-4.9,0-8.9-4-8.9-8.9c0-4.9,4-8.9,8.8-8.9 C364.1,41.5,368.1,45.5,368.1,50.4L368.1,50.4L368.1,50.4z" /> <path class="st0" d="M392.6,29.4c-1.7-0.1-3.4,0.6-4.6,1.8c-1.3,1.3-1.9,3-1.8,4.7v20.3c0,1-0.7,1.8-1.7,1.9h-10.3 c-1,0.1-1.8-0.7-1.9-1.7v-36c0-1,0.7-1.8,1.7-1.9h10.2c0.5,0,1,0.2,1.3,0.5c0.4,0.4,0.5,0.8,0.5,1.3v2.9c1.2-1.9,2.9-3.4,4.8-4.4 c2.1-1,4.4-1.5,6.7-1.5c5,0,8.8,1.5,11.3,4.4c2.6,3,3.8,7.3,3.8,12.9v21.5c0.1,1-0.7,1.8-1.7,1.9h-10.3c-1,0.1-1.8-0.7-1.9-1.7 V35.9c0.1-1.8-0.6-3.5-1.8-4.7C395.9,30,394.3,29.4,392.6,29.4z" /> <path class="st0" d="M455.3,51.7c-1.8,2.5-4.3,4.4-7.1,5.5c-3.3,1.4-6.8,2.1-10.3,2.1c-6.3,0-11.5-2-15.6-5.9 c-4-3.9-6.2-9.3-6.1-14.8c0-6.2,1.9-11.3,5.7-15.2c3.8-3.9,8.8-5.9,15-5.9c6,0,10.8,1.9,14.5,5.7c3.7,3.7,5.7,8.7,5.6,13.9v2.3 c0,0.7-0.2,1.5-0.6,2.1c-0.4,0.5-1,0.8-1.6,0.8h-24.7c0.3,1.7,1.3,3.3,2.7,4.4c1.5,1.1,3.3,1.7,5.2,1.6c1.3,0,2.6-0.2,3.8-0.7 c1.3-0.6,2.4-1.4,3.3-2.3c0.8-0.9,2.1-1.1,3.1-0.3l6.7,4.4c0.4,0.2,0.7,0.7,0.8,1.2C455.7,50.7,455.6,51.3,455.3,51.7L455.3,51.7 L455.3,51.7z M430.5,33.2h13.1c-0.3-1.5-1-2.8-2.2-3.8c-1.2-1-2.7-1.5-4.2-1.4c-1.5,0-3.1,0.5-4.3,1.4 C431.7,30.4,430.8,31.7,430.5,33.2z" /> <path class="st0" d="M478.2,58.9c-4.3,0-7.8-1.1-10.4-3.4c-2.6-2.3-3.9-5.4-3.9-9.4V30h-4.1c-0.5,0-1-0.2-1.3-0.6 c-0.4-0.4-0.5-0.9-0.5-1.4v-2.9c0-0.7,0.1-1.4,0.2-2c0.2-0.6,0.5-1.1,0.9-1.5l9.8-10.9c0.6-0.7,1.3-1.3,2.1-1.8 c0.7-0.3,1.4-0.4,2.2-0.4h2.7c0.5,0,1,0.2,1.3,0.5c0.4,0.4,0.6,0.8,0.5,1.3v8.1h8.7c0.5,0,1,0.2,1.3,0.5c0.4,0.4,0.6,0.8,0.6,1.3 v7.7c0,0.5-0.2,1-0.6,1.4c-0.4,0.4-0.8,0.6-1.3,0.6h-8.7v13.2c-0.1,0.8,0.2,1.7,0.8,2.3c0.6,0.6,1.3,0.9,2.1,0.8 c0.6,0,1.1-0.1,1.7-0.3c0.7-0.3,1.4-0.6,2.1-1c0.9-0.8,2.4-0.7,3.2,0.3c0.1,0.1,0.2,0.3,0.3,0.5l3.5,5.2c0.4,0.5,0.6,1.2,0.6,1.8 c0,0.6-0.3,1.2-0.7,1.6c-1.6,1.5-3.5,2.7-5.6,3.4C483.2,58.5,480.7,58.9,478.2,58.9L478.2,58.9L478.2,58.9z" /> <path class="st0" d="M264.5,20.4v35.9c0,0.5-0.2,1-0.5,1.3c-0.4,0.4-0.9,0.6-1.4,0.5h-10c-0.5,0-1-0.2-1.4-0.5 c-0.4-0.4-0.6-0.8-0.5-1.3V20.4c0-0.5,0.2-1,0.5-1.3c0.4-0.4,0.9-0.6,1.4-0.5h10c0.5,0,1,0.2,1.4,0.5 C264.3,19.4,264.5,19.9,264.5,20.4z" /> </g></svg>';

        // Get the main-top-logo container element
        const mainTopLogo = this.template.querySelector('.main-top-logo');
        mainTopLogo.innerHTML = ''; // Clear existing content inside the div
        mainTopLogo.innerHTML = authSVG;

        // Get the logo-svg container element
        const cardLogo = this.template.querySelector('.logo-svg');
        cardLogo.innerHTML = ''; // Clear existing content inside the div
        cardLogo.innerHTML = authcardSVG;

        const mainDropdownText = this.template.querySelector('.dropdown-button-text');
        mainDropdownText.innerHTML = ''; // Clear existing content inside the div
        mainDropdownText.innerHTML = 'Authorize.Net';

        this.isInputDisabled = false;
    }

    //This function replaces logos with Stripe logo and changes the text of dropdown button
    replacetoStripeSVG() {
        const stripeSVG = '         <svg viewBox="0 0 160 25" xmlns="http://www.w3.org/2000/svg" class="top-logo-width-set" height="100%" width="100%"><path fill="var(--userLogoColor, #0A2540)" d="M59.64 14.28h-8.06c.19 1.93 1.6 2.55 3.2 2.55 1.64 0 2.96-.37 4.05-.95v3.32a8.33 8.33 0 0 1-4.56 1.1c-4.01 0-6.83-2.5-6.83-7.48 0-4.19 2.39-7.52 6.3-7.52 3.92 0 5.96 3.28 5.96 7.5 0 .4-.04 1.26-.06 1.48zm-5.92-5.62c-1.03 0-2.17.73-2.17 2.58h4.25c0-1.85-1.07-2.58-2.08-2.58zM40.95 20.3c-1.44 0-2.32-.6-2.9-1.04l-.02 4.63-4.12.87V5.57h3.76l.08 1.02a4.7 4.7 0 0 1 3.23-1.29c2.9 0 5.62 2.6 5.62 7.4 0 5.23-2.7 7.6-5.65 7.6zM40 8.95c-.95 0-1.54.34-1.97.81l.02 6.12c.4.44.98.78 1.95.78 1.52 0 2.54-1.65 2.54-3.87 0-2.15-1.04-3.84-2.54-3.84zM28.24 5.57h4.13v14.44h-4.13V5.57zm0-4.7L32.37 0v3.36l-4.13.88V.88zm-4.32 9.35v9.79H19.8V5.57h3.7l.12 1.22c1-1.77 3.07-1.41 3.62-1.22v3.79c-.52-.17-2.29-.43-3.32.86zm-8.55 4.72c0 2.43 2.6 1.68 3.12 1.46v3.36c-.55.3-1.54.54-2.89.54a4.15 4.15 0 0 1-4.27-4.24l.01-13.17 4.02-.86v3.54h3.14V9.1h-3.13v5.85zm-4.91.7c0 2.97-2.31 4.66-5.73 4.66a11.2 11.2 0 0 1-4.46-.93v-3.93c1.38.75 3.1 1.31 4.46 1.31.92 0 1.53-.24 1.53-1C6.26 13.77 0 14.51 0 9.95 0 7.04 2.28 5.3 5.62 5.3c1.36 0 2.72.2 4.09.75v3.88a9.23 9.23 0 0 0-4.1-1.06c-.86 0-1.44.25-1.44.9 0 1.85 6.29.97 6.29 5.88z" fill-rule="evenodd"></path></svg>';
        const stripecardSVG = '         <svg viewBox="0 0 60 25" xmlns="http://www.w3.org/2000/svg" height="30px" ><path fill="var(--userLogoColor, #0A2540)" d="M59.64 14.28h-8.06c.19 1.93 1.6 2.55 3.2 2.55 1.64 0 2.96-.37 4.05-.95v3.32a8.33 8.33 0 0 1-4.56 1.1c-4.01 0-6.83-2.5-6.83-7.48 0-4.19 2.39-7.52 6.3-7.52 3.92 0 5.96 3.28 5.96 7.5 0 .4-.04 1.26-.06 1.48zm-5.92-5.62c-1.03 0-2.17.73-2.17 2.58h4.25c0-1.85-1.07-2.58-2.08-2.58zM40.95 20.3c-1.44 0-2.32-.6-2.9-1.04l-.02 4.63-4.12.87V5.57h3.76l.08 1.02a4.7 4.7 0 0 1 3.23-1.29c2.9 0 5.62 2.6 5.62 7.4 0 5.23-2.7 7.6-5.65 7.6zM40 8.95c-.95 0-1.54.34-1.97.81l.02 6.12c.4.44.98.78 1.95.78 1.52 0 2.54-1.65 2.54-3.87 0-2.15-1.04-3.84-2.54-3.84zM28.24 5.57h4.13v14.44h-4.13V5.57zm0-4.7L32.37 0v3.36l-4.13.88V.88zm-4.32 9.35v9.79H19.8V5.57h3.7l.12 1.22c1-1.77 3.07-1.41 3.62-1.22v3.79c-.52-.17-2.29-.43-3.32.86zm-8.55 4.72c0 2.43 2.6 1.68 3.12 1.46v3.36c-.55.3-1.54.54-2.89.54a4.15 4.15 0 0 1-4.27-4.24l.01-13.17 4.02-.86v3.54h3.14V9.1h-3.13v5.85zm-4.91.7c0 2.97-2.31 4.66-5.73 4.66a11.2 11.2 0 0 1-4.46-.93v-3.93c1.38.75 3.1 1.31 4.46 1.31.92 0 1.53-.24 1.53-1C6.26 13.77 0 14.51 0 9.95 0 7.04 2.28 5.3 5.62 5.3c1.36 0 2.72.2 4.09.75v3.88a9.23 9.23 0 0 0-4.1-1.06c-.86 0-1.44.25-1.44.9 0 1.85 6.29.97 6.29 5.88z" fill-rule="evenodd"></path></svg>';

        console.log("In function for svgContainer");

        // Get the main-top-logo container element
        const mainTopLogo = this.template.querySelector('.main-top-logo');
        mainTopLogo.innerHTML = ''; // Clear existing content inside the div
        mainTopLogo.innerHTML = stripeSVG;

        // Get the logo-svg container element
        const cardLogo = this.template.querySelector('.logo-svg');
        cardLogo.innerHTML = ''; // Clear existing content inside the div
        cardLogo.innerHTML = stripecardSVG;

        const mainDropdownText = this.template.querySelector('.dropdown-button-text');
        mainDropdownText.innerHTML = ''; // Clear existing content inside the div
        mainDropdownText.innerHTML = 'Stripe';

        this.isInputDisabled = false;
    }

    //This function replaces logos with Square logo and changes the text of dropdown button
    replacetoSquareSVG() {
        const squareSVG = '<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 6000 995.7" class="top-logo-width-set main-top-logo-square" height="100%" width="100%"><path d="M828.4,0H166.2C74.4,0,0,74.4,0,166.2v662.2c0,91.8,74.4,166.2,166.2,166.2h662.2c91.8,0,166.2-74.4,166.2-166.2V166.2C994.6,74.4,920.2,0,828.4,0z M813.8,761.3c0,29-23.5,52.5-52.5,52.5h-528c-29,0-52.5-23.5-52.5-52.5v-528c0-29,23.5-52.5,52.5-52.5h528c29,0,52.5,23.5,52.5,52.5V761.3z M391.8,632.3c-16.7,0-30.1-13.5-30.1-30.2V391.3c0-16.7,13.4-30.3,30.1-30.3h211.1c16.6,0,30.1,13.5,30.1,30.3V602c0,16.7-13.5,30.2-30.1,30.2H391.8z M1258.3,617.9h108.6c5.4,61.5,47.1,109.5,131.2,109.5c75.1,0,121.3-37.1,121.3-93.2c0-52.5-36.2-76-101.4-91.4l-84.2-18.1c-91.4-19.9-160.2-78.7-160.2-174.7c0-105.9,94.1-178.3,216.3-178.3c129.4,0,212.7,67.9,219.9,168.3h-105C1592.3,293,1553.3,265,1490,265c-67,0-113.1,36.2-113.1,82.4s39.8,74.2,108.6,89.6l83.3,18.1c91.4,19.9,153.8,75.1,153.8,171.9c0,123.1-92.3,196.4-224.4,196.4C1349.7,823.3,1267.4,742.8,1258.3,617.9z M2111.1,994.6V814.5l7.1-79h-7.1c-24.9,56.8-77.2,87.9-148.2,87.9c-114.5,0-199.7-93.2-199.7-236.1c0-142.9,85.2-236.1,199.7-236.1c70.1,0,119.8,32.8,148.2,84.3h-7.1V360h94.1v634.6H2111.1z M2114.6,587.2c0-91.4-55.9-144.7-124.3-144.7s-124.3,53.3-124.3,144.7c0,91.4,55.9,144.7,124.3,144.7S2114.6,678.7,2114.6,587.2z M2287.4,634.3V360h101.2v265.4c0,71.9,34.6,106.5,92.3,106.5c71,0,117.2-50.6,117.2-129.6V360h101.2v454.4h-94.1v-94.1h-7.1c-22.2,60.4-71,103-146.4,103C2343.3,823.3,2287.4,754.1,2287.4,634.3z M2760.9,687.5c0-85.2,59.5-134.9,165.1-141.1l125.1-8v-35.5c0-42.6-31.1-68.3-86.1-68.3c-50.6,0-80.8,25.7-88.8,62.1h-101.2c10.7-92.3,87-145.6,189.9-145.6c116.3,0,187.3,49.7,187.3,145.6v317.7h-94.1v-84.3h-7.1c-21.3,55.9-65.7,93.2-150.9,93.2C2818.6,823.3,2760.9,768.3,2760.9,687.5z M3051.2,631.6v-24l-102.1,7.1c-55,3.5-79.9,24-79.9,64.8c0,34.6,28.4,59.5,68.3,59.5C3009.5,739,3051.2,692.9,3051.2,631.6z M3227.7,814.5V360h94.1v87h7.1c13.3-59.5,58.6-87,126-87h46.2v91.4h-57.7c-65.7,0-114.5,42.6-114.5,123.4v239.6H3227.7z M3964.1,605.9h-345.3c5.3,83.4,63.9,130.5,128.7,130.5c55,0,89.6-22.2,109.2-59.5H3957c-27.5,92.3-108.3,146.4-210.4,146.4c-134,0-228.1-100.3-228.1-236.1c0-135.8,96.7-236.1,229-236.1c133.1,0,220.1,91.4,220.1,205C3967.7,578.4,3965.9,589.9,3964.1,605.9z M3867.4,535.8c-3.5-63-55.9-105.6-119.8-105.6c-60.4,0-110.9,38.2-123.4,105.6H3867.4z" fill="black" ></path></svg>';
        const squarecardSVG = '<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 3967.7 995.7" height="30px"><path d="M828.4,0H166.2C74.4,0,0,74.4,0,166.2v662.2c0,91.8,74.4,166.2,166.2,166.2h662.2c91.8,0,166.2-74.4,166.2-166.2V166.2C994.6,74.4,920.2,0,828.4,0z M813.8,761.3c0,29-23.5,52.5-52.5,52.5h-528c-29,0-52.5-23.5-52.5-52.5v-528c0-29,23.5-52.5,52.5-52.5h528c29,0,52.5,23.5,52.5,52.5V761.3z M391.8,632.3c-16.7,0-30.1-13.5-30.1-30.2V391.3c0-16.7,13.4-30.3,30.1-30.3h211.1c16.6,0,30.1,13.5,30.1,30.3V602c0,16.7-13.5,30.2-30.1,30.2H391.8z M1258.3,617.9h108.6c5.4,61.5,47.1,109.5,131.2,109.5c75.1,0,121.3-37.1,121.3-93.2c0-52.5-36.2-76-101.4-91.4l-84.2-18.1c-91.4-19.9-160.2-78.7-160.2-174.7c0-105.9,94.1-178.3,216.3-178.3c129.4,0,212.7,67.9,219.9,168.3h-105C1592.3,293,1553.3,265,1490,265c-67,0-113.1,36.2-113.1,82.4s39.8,74.2,108.6,89.6l83.3,18.1c91.4,19.9,153.8,75.1,153.8,171.9c0,123.1-92.3,196.4-224.4,196.4C1349.7,823.3,1267.4,742.8,1258.3,617.9z M2111.1,994.6V814.5l7.1-79h-7.1c-24.9,56.8-77.2,87.9-148.2,87.9c-114.5,0-199.7-93.2-199.7-236.1c0-142.9,85.2-236.1,199.7-236.1c70.1,0,119.8,32.8,148.2,84.3h-7.1V360h94.1v634.6H2111.1z M2114.6,587.2c0-91.4-55.9-144.7-124.3-144.7s-124.3,53.3-124.3,144.7c0,91.4,55.9,144.7,124.3,144.7S2114.6,678.7,2114.6,587.2z M2287.4,634.3V360h101.2v265.4c0,71.9,34.6,106.5,92.3,106.5c71,0,117.2-50.6,117.2-129.6V360h101.2v454.4h-94.1v-94.1h-7.1c-22.2,60.4-71,103-146.4,103C2343.3,823.3,2287.4,754.1,2287.4,634.3z M2760.9,687.5c0-85.2,59.5-134.9,165.1-141.1l125.1-8v-35.5c0-42.6-31.1-68.3-86.1-68.3c-50.6,0-80.8,25.7-88.8,62.1h-101.2c10.7-92.3,87-145.6,189.9-145.6c116.3,0,187.3,49.7,187.3,145.6v317.7h-94.1v-84.3h-7.1c-21.3,55.9-65.7,93.2-150.9,93.2C2818.6,823.3,2760.9,768.3,2760.9,687.5z M3051.2,631.6v-24l-102.1,7.1c-55,3.5-79.9,24-79.9,64.8c0,34.6,28.4,59.5,68.3,59.5C3009.5,739,3051.2,692.9,3051.2,631.6z M3227.7,814.5V360h94.1v87h7.1c13.3-59.5,58.6-87,126-87h46.2v91.4h-57.7c-65.7,0-114.5,42.6-114.5,123.4v239.6H3227.7z M3964.1,605.9h-345.3c5.3,83.4,63.9,130.5,128.7,130.5c55,0,89.6-22.2,109.2-59.5H3957c-27.5,92.3-108.3,146.4-210.4,146.4c-134,0-228.1-100.3-228.1-236.1c0-135.8,96.7-236.1,229-236.1c133.1,0,220.1,91.4,220.1,205C3967.7,578.4,3965.9,589.9,3964.1,605.9z M3867.4,535.8c-3.5-63-55.9-105.6-119.8-105.6c-60.4,0-110.9,38.2-123.4,105.6H3867.4z" fill="black" ></path></svg>';
        console.log("In function for svgContainer");

        // Get the main-top-logo container element
        const mainTopLogo = this.template.querySelector('.main-top-logo');
        mainTopLogo.innerHTML = ''; // Clear existing content inside the div
        mainTopLogo.innerHTML = squareSVG;

        // Get the logo-svg container element
        const cardLogo = this.template.querySelector('.logo-svg');
        cardLogo.innerHTML = ''; // Clear existing content inside the div
        cardLogo.innerHTML = squarecardSVG;

        const mainDropdownText = this.template.querySelector('.dropdown-button-text');
        mainDropdownText.innerHTML = ''; // Clear existing content inside the div
        mainDropdownText.innerHTML = 'Square';

        this.isInputDisabled = false;
    }

    //This function replaces logos with Skrill logo and changes the text of dropdown button
    replacetoskrillSVG() {
        const skrillSVG = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="10 10 300 45" class="top-logo-width-set" height="100%" width="130%"><path d="M78.26 22.58c1.897 0 3.433-1.536 3.433-3.43s-1.537-3.433-3.433-3.433-3.43 1.538-3.43 3.433a3.43 3.43 0 0 0 3.43 3.431M51.966 24.43c-.155.4-1.27 3.54-3.967 6.803V17.277l-7.185 1.42v25.3H48v-7.82c2.082 3.12 3.11 7.82 3.11 7.82h8.607c-.85-3.54-4.575-10.065-4.575-10.065a31.51 31.51 0 0 0 5.043-9.501zm18.89-.264c-6.435.207-9.703 3.094-9.703 8.834v10.996h7.022V35.03c0-3.436.45-4.9 4.528-5.05v-5.71c-.686-.146-1.847-.1-1.847-.1m-42.092 3.05c-.88-.057-2.918-.19-2.918-2.024 0-2.213 2.933-2.213 4.034-2.213 1.935 0 4.44.57 6.23 1.107a37.42 37.42 0 0 0 1.848.712l.08.022V18.76l-.108-.032c-2.112-.74-4.567-1.45-9.12-1.45-7.85 0-10.63 4.572-10.63 8.49 0 2.258.968 7.573 9.957 8.186.762.047 2.784.163 2.784 2.06 0 1.565-1.656 2.488-4.44 2.488-3.05 0-6.013-.778-7.81-1.516v6.243c2.692.705 5.726 1.058 9.283 1.058 7.675 0 11.112-4.326 11.112-8.614 0-4.862-3.846-8.02-10.3-8.453m46.016 16.78h6.964V24.454H74.78zm20.078-25.475v25.475h6.966v-26.72zm-10.163 0l6.958-1.245v26.72h-6.958V18.523z" fill="#862565" /></svg>';
        const skrillcardSVG = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="10 0 90 45" height="30px"><path d="M78.26 22.58c1.897 0 3.433-1.536 3.433-3.43s-1.537-3.433-3.433-3.433-3.43 1.538-3.43 3.433a3.43 3.43 0 0 0 3.43 3.431M51.966 24.43c-.155.4-1.27 3.54-3.967 6.803V17.277l-7.185 1.42v25.3H48v-7.82c2.082 3.12 3.11 7.82 3.11 7.82h8.607c-.85-3.54-4.575-10.065-4.575-10.065a31.51 31.51 0 0 0 5.043-9.501zm18.89-.264c-6.435.207-9.703 3.094-9.703 8.834v10.996h7.022V35.03c0-3.436.45-4.9 4.528-5.05v-5.71c-.686-.146-1.847-.1-1.847-.1m-42.092 3.05c-.88-.057-2.918-.19-2.918-2.024 0-2.213 2.933-2.213 4.034-2.213 1.935 0 4.44.57 6.23 1.107a37.42 37.42 0 0 0 1.848.712l.08.022V18.76l-.108-.032c-2.112-.74-4.567-1.45-9.12-1.45-7.85 0-10.63 4.572-10.63 8.49 0 2.258.968 7.573 9.957 8.186.762.047 2.784.163 2.784 2.06 0 1.565-1.656 2.488-4.44 2.488-3.05 0-6.013-.778-7.81-1.516v6.243c2.692.705 5.726 1.058 9.283 1.058 7.675 0 11.112-4.326 11.112-8.614 0-4.862-3.846-8.02-10.3-8.453m46.016 16.78h6.964V24.454H74.78zm20.078-25.475v25.475h6.966v-26.72zm-10.163 0l6.958-1.245v26.72h-6.958V18.523z" fill="#862565" /></svg>';

        console.log("In function for svgContainer");

        // Get the main-top-logo container element
        const mainTopLogo = this.template.querySelector('.main-top-logo');
        mainTopLogo.innerHTML = ''; // Clear existing content inside the div
        mainTopLogo.innerHTML = skrillSVG;

        // Get the logo-svg container element
        const cardLogo = this.template.querySelector('.logo-svg');
        cardLogo.innerHTML = ''; // Clear existing content inside the div
        cardLogo.innerHTML = skrillcardSVG;

        const mainDropdownText = this.template.querySelector('.dropdown-button-text');
        mainDropdownText.innerHTML = ''; // Clear existing content inside the div
        mainDropdownText.innerHTML = 'Skrill';

        this.isInputDisabled = false;
    }

    //This function toggles the dropdown menu
    changeClass(event) {

        // Get the current class list of the clicked element
        const classes = event.currentTarget.classList;

        // Check if the class "slds-is-open" exists
        if (classes.contains("slds-is-open")) {
            // If it exists, remove it
            classes.remove("slds-is-open");
        } else {
            // If it doesn't exist, add it
            classes.add("slds-is-open");
        }
    }

    //This function handles a click event on a list element, checks the title attribute, and dynamically replaces SVG images based on the clicked option.
    listClick(event) {
        console.log('In listClick');
        const liElement = event.currentTarget;
        const title = liElement.getAttribute('title');
        this.clearErrors();
        console.log(this.barControllerArray[0][0]+'-----'+this.barControllerArray[0][1]+'-----'+this.barControllerArray[0][2]);
        console.log(this.barControllerArray[1][0]+'-----'+this.barControllerArray[1][1]+'-----'+this.barControllerArray[1][2]);
        console.log(this.barControllerArray[2][0]+'-----'+this.barControllerArray[2][1]+'-----'+this.barControllerArray[2][2]);
        console.log('Title is: ', title);
        // Check the title attribute and perform actions accordingly
        if (title === 'Global Payments') {
            this.replacetoGPSVG();
            console.log('Indicator Setter : '+this.barControllerArray[0][1]);
            console.log('Error Setter : '+this.barControllerArray[0][2]);
            console.log('Type of Error Setter : '+typeof this.barControllerArray[0][2]);
            //this.error=this.barControllerArray[0][2]=='false'?false:true;
            if (this.barControllerArray[0][2] == 'false' || this.barControllerArray[0][2] == false ) {
                this.error = false;
            } else {
                this.error = true;
            }
            console.log('Error Setted : '+this.error);
            this.currentStepRequestIndicator=this.barControllerArray[0][1];
            console.log('Replacing with Global Payments SVG');

        } else if (title === 'Authorize.net') {
            this.replacetoAuthSVG();
            if (this.barControllerArray[1][2] == 'false' || this.barControllerArray[1][2] == false ) {
                this.error = false;
            } else {
                this.error = true;
            }
            this.currentStepRequestIndicator=this.barControllerArray[1][1];
            
            console.log('Clicked on Authorize.net');
        } else if (title === 'Stripe') {
            this.replacetoStripeSVG();
            if (this.barControllerArray[2][2] == 'false' || this.barControllerArray[2][2] == false ) {
                this.error = false;
            } else {2
                this.error = true;
            }
            this.currentStepRequestIndicator=this.barControllerArray[2][1];
            
            console.log('Clicked on Stripe');
        } else if (title === 'Square') {
            this.replacetoSquareSVG();
            console.log('Clicked on Square');
        } else if (title === 'Skrill') {
            this.replacetoskrillSVG();
            console.log('Clicked on Skrill');
        }
    }

    //It validates input in a card number field. It checks if the pressed key is a number and displays an error message if not, preventing non-numeric input.
    handleKeyPressCNumber(event) {
        const keyPressed = event.key;
        const cardNumberInput = this.template.querySelector('.card-number-input');

        // Check if the pressed key is not a number
        if (isNaN(keyPressed) || keyPressed === ' ') {
            // Show error message
            cardNumberInput.setCustomValidity('Only numbers are allowed');
            cardNumberInput.reportValidity();
            event.preventDefault(); // Prevent the non-numeric input
        } else {
            // Clear the error message if the input is numeric
            cardNumberInput.setCustomValidity('');
            cardNumberInput.reportValidity();
        }
    }

    //It validates input in an expiry date field. It checks if the pressed key is a number and displays an error message if not, preventing non-numeric input.
    handleKeyPressCExpiry(event) {
        const keyPressed = event.key;
        const expInput = this.template.querySelector('.expiry-data');

        // Check if the pressed key is not a number
        if (isNaN(keyPressed) || keyPressed === ' ') {
            // Show error message
            expInput.setCustomValidity('Only numbers are allowed');
            expInput.reportValidity();
            event.preventDefault(); // Prevent the non-numeric input
        } else {
            // Clear the error message if the input is numeric
            expInput.setCustomValidity('');
            expInput.reportValidity();
        }
    }

    //It validates input in a credit card CVV (Card Verification Value) field. It checks if the pressed key is a number and displays an error message if not, preventing non-numeric input.
    handleKeyPressCVV(event) {
        const keyPressed = event.key;
        const cardNumberInput = this.template.querySelector('.card-cvv');

        // Check if the pressed key is not a number
        if (isNaN(keyPressed) || keyPressed === ' ') {
            // Show error message
            cardNumberInput.setCustomValidity('Only numbers are allowed');
            cardNumberInput.reportValidity();
            event.preventDefault(); // Prevent the non-numeric input
        } else {
            // Clear the error message if the input is numeric
            cardNumberInput.setCustomValidity('');
            cardNumberInput.reportValidity();
        }
    }

    //It formats the input from a credit card number field as XXXX-XXXX-XXXX-XXXX
    handleCardNumberChange(event) {


        const limitedInput = event.target.value;

        // Format the input as XXXX-XXXX-XXXX-XXXX
        let formattedNumber = '';
        for (let i = 0; i < limitedInput.length; i += 4) {
            formattedNumber += limitedInput.slice(i, i + 4) + '-';
        }

        // Remove the trailing dash from the formatted number
        formattedNumber = formattedNumber.slice(0, -1);

        if (formattedNumber.length == 0) {
            formattedNumber = 'XXXX-XXXX-XXXX-XXXX';
        }

        // Update the outputCardNumber with the formatted number
        this.outputCardNumber = formattedNumber;
    }

    //This function formats the MM/YY input, adds a forward slash at the third position if needed
    handleMMYYChange(event) {
        const limitedInput = event.target.value;
        const hasSlash = limitedInput.includes('/');
        // Format the input as MM/YY
        let formattedNumber = '';

        for (let i = 0; i < limitedInput.length; i++) {
            // Insert a forward slash at the third position if the condition is met
            if (i == 2 && !hasSlash) {
                formattedNumber += '/';

            }
            formattedNumber += limitedInput[i];
        }

        // Update the input field with the formatted number
        const newvalue = this.template.querySelector('.expiry-data');
        newvalue.value = formattedNumber;

        // Update the outputMMYY with the formatted number
        this.outputMMYY = formattedNumber;

        // Check if the input is empty, if yes, set the default placeholder text
        if (formattedNumber.length === 0) {
            formattedNumber = 'MM/YY';
        }

        // Update the outputCardNumber with the formatted number
        this.outputMMYY = formattedNumber;

    }

    //This function sets CVV
    handleCVVChange(event) {

        let formattedNumber = event.target.value;
        // Check if the input is empty, if yes, set the default placeholder text
        if (formattedNumber.length === 0) {
            formattedNumber = 'CVV';
        }

        // Update the outputCardNumber with the formatted number
        this.outputCVV = formattedNumber;

    }
    handlePaste(event) {
    // Prevent the default paste behavior
    event.preventDefault();

    // Get the pasted text
    const pastedText = (event.clipboardData || window.clipboardData).getData('text');

    // Remove non-numeric characters using a regular expression
    const numericText = pastedText.replace(/[^0-9]/g, '');

    // Insert the modified text back into the input field
    document.execCommand('insertText', false, numericText);
  }
  handlePasteExpiry(event) {
    // Prevent the default paste behavior
    event.preventDefault();

    // Get the pasted text
    const pastedText = (event.clipboardData || window.clipboardData).getData('text');

    // Remove non-numeric characters using a regular expression
    let numericText = pastedText.replace(/[^0-9]/g, '');

    // Trim to only 4 characters if the length is greater than 4
    if (numericText.length > 4) {
      numericText = numericText.substring(0, 4);
    }

    // Insert the modified text back into the input field
    document.execCommand('insertText', false, numericText);
  }
  showLoader()
  {
    console.log('Show Loader');
    this.loader=true;
  }
  hideLoader()
  {
    console.log('Hide Loader');
    this.loader=false;
  }
    //This function handles card submission, updates the request indicator, and triggers different toast events
    handleSubmitClick() {
        this.showLoader();
        const currentGateway = this.template.querySelector('.dropdown-button-text').innerHTML;
        console.log('In Submit CLick' + currentGateway);
        this.resultdata = '';
        this.currentStepRequestIndicator = "1";
        this.clearErrors();
        this.error = false;
        const cardNumberInput = this.template.querySelector('.card-number-input').value;
        const cardCVVInput = this.template.querySelector('.card-cvv').value;
        const cardExpiryInput = this.template.querySelector('.expiry-data').value;

        //Invalid or incomplete Card Number
        if (cardNumberInput == '' || cardNumberInput == null) {
            const toastRequestRecievedErrorEvent = new ShowToastEvent({
                title: 'Error!',
                message: 'Invalid Card Number.',
                variant: 'error',
                mode: 'dismissible'
            });
            this.dispatchEvent(toastRequestRecievedErrorEvent);
        }
        else if (cardExpiryInput == '' || cardExpiryInput == null || cardExpiryInput.length != 5) {
            const toastRequestRecievedErrorEvent = new ShowToastEvent({
                title: 'Error!',
                message: 'Invalid Card Expiry.',
                variant: 'error',
                mode: 'dismissible'
            });
            this.dispatchEvent(toastRequestRecievedErrorEvent);
        }
        //Input card details are complete
        else {
            console.log(currentGateway);
            if (currentGateway == 'Global Payment') {
                console.log('In' + currentGateway);
                console.log(cardNumberInput);
                console.log(cardExpiryInput);
                console.log(cardCVVInput);
                // Call the Apex method when the "Fetch Data" button is clicked
                getGlobalPaymentCardController({ cardNumber: cardNumberInput, cardExpirationDate: cardExpiryInput, cardCVV: cardCVVInput, accountId: this.account.fields.Id.value, type: 'Global Payments' })
                    .then(result => {
                        this.currentStepRequestIndicator = "2";
                        this.resultdata = result;
                        console.log(result);
                        if (this.resultdata != null || this.resultdata != undefined || this.resultdata != 'undefined' || this.resultdata.status == '200') {
                            console.log('Response Recieved');
                            const responseRecievedSuccessfully = new ShowToastEvent({
                                title: 'Response Recieved Successfully!',
                                message: ('The response has been received.'),
                                variant: 'info', // 'success', 'warning', 'error', or 'info'
                                mode: 'dismissible' // 'dismissable' or 'pester'
                            });
                            this.dispatchEvent(responseRecievedSuccessfully);
                            this.currentStepRequestIndicator = "2";
                            this.barControllerArray[0][1]=this.currentStepRequestIndicator;

                            if (this.resultdata.error_code == 'undefined' || this.resultdata.error_code == undefined || this.resultdata.error_code == null) {
                                console.log('Card Added Successfully');
                                console.log(cardNumberInput);
                                const maskedCardNumber = "xxxxxxxxxxxx" + cardNumberInput.toString().slice(-4);
                                console.log(maskedCardNumber);
                                const cardAddedSuccessfully = new ShowToastEvent({
                                    title: 'Card Added Successfully!',
                                    message: ('with the number ' + maskedCardNumber),
                                    variant: 'success', // 'success', 'warning', 'error', or 'info'
                                    mode: 'dismissible' // 'dismissable' or 'pester'
                                });
                                setTimeout(() => {
                                    this.currentStepRequestIndicator = "3";
                                    this.error = false;
                                    this.barControllerArray[0][1]=this.currentStepRequestIndicator;
                                    this.barControllerArray[0][2]=this.error;
                                    this.dispatchEvent(cardAddedSuccessfully);
                                    this.hideLoader();
                                    setTimeout(() => {
                                        this.currentStepRequestIndicator = "1";
                                        this.barControllerArray[0][1]=this.currentStepRequestIndicator;
                                        this.template.querySelector('.card-number-input').value = '';
                                        this.template.querySelector('.card-cvv').value = '';
                                        this.template.querySelector('.expiry-data').value = '';
                                        this.outputCardNumber = 'XXXX-XXXX-XXXX-XXXX';
                                        this.outputMMYY = 'MM/YY';
                                        this.outputCVV = 'CVV';
                                    }, 2500);
                                }, 1200);
                            }
                            else {
                                console.log('Error Recieved');
                                const toastRequestRecievedError = new ShowToastEvent({
                                    title: this.resultdata.error_code,
                                    message: this.resultdata.detailed_error_description,
                                    variant: 'error', // 'success', 'warning', 'error', or 'info'
                                    mode: 'dismissible' // 'dismissable' or 'pester'
                                });
                                setTimeout(() => {
                                    this.currentStepRequestIndicator = "3";
                                    this.error = true;
                                    this.barControllerArray[0][1]=this.currentStepRequestIndicator;
                                    this.barControllerArray[0][2]=this.error;
                                    this.dispatchEvent(toastRequestRecievedError);
                                    this.hideLoader();
                                }, 1200);
                            }

                        }
                        else {
                            console.log('this.resultdata.status' + this.resultdata.status);
                            console.log('this.resultdata' + this.resultdata);
                            console.log('Response Not Recieved');
                            this.currentStepRequestIndicator = "2";
                            this.error = true;
                            this.barControllerArray[0][1]=this.currentStepRequestIndicator;
                                    this.barControllerArray[0][2]=this.error;
                                    this.hideLoader();
                        }

                    })
                    .catch(error => {
                        // Handle errors
                        const toastRequestRecievedError = new ShowToastEvent({
                            title: 'Error code: ' + error.status,
                            message: error.body.message,
                            variant: 'error', // 'success', 'warning', 'error', or 'info'
                            mode: 'dismissible' // 'dismissable' or 'pester'
                        });
                        this.error = true;
                        this.dispatchEvent(toastRequestRecievedError);
                        console.error('Error fetching data: ', error);
                        this.hideLoader();
                    });
            }
            else if (currentGateway == 'Authorize.Net') {
                console.log('In' + currentGateway);
                console.log(cardNumberInput);
                console.log(cardExpiryInput);
                console.log(cardCVVInput);
                // Call the Apex method when the "Fetch Data" button is clicked
                getAuthorizeNetCardController({ cardNumber: cardNumberInput, cardExpirationDate: cardExpiryInput, cardCVV: cardCVVInput, accountId: this.account.fields.Id.value, type: currentGateway })
                    .then(result => {
                        
                        this.currentStepRequestIndicator = "2";
                        this.barControllerArray[1][1]=this.currentStepRequestIndicator;
                        this.resultdata = result;
                        console.log(result);
                        if (this.resultdata != null || this.resultdata != undefined || this.resultdata != 'undefined' || this.resultdata.Messages.resultCode.toLowerCase() == 'ok') {
                            console.log('Response Recieved');
                            const responseRecievedSuccessfully = new ShowToastEvent({
                                title: 'Response Recieved Successfully!',
                                message: ('The response has been received.'),
                                variant: 'info', // 'success', 'warning', 'error', or 'info'
                                mode: 'dismissible' // 'dismissable' or 'pester'
                            });
                            this.dispatchEvent(responseRecievedSuccessfully);
                            this.currentStepRequestIndicator = "2";
                            this.barControllerArray[1][1]=this.currentStepRequestIndicator;
                            console.log('Response Recieved');
                            console.log('Message is :' + this.resultdata);
                            if (this.resultdata.messages.resultCode == 'Ok') {
                                console.log('Card Added Successfully');
                                console.log(cardNumberInput);
                                const maskedCardNumber = "xxxxxxxxxxxx" + cardNumberInput.toString().slice(-4);
                                console.log(maskedCardNumber);
                                const cardAddedSuccessfully = new ShowToastEvent({
                                    title: 'Card Added Successfully!',
                                    message: ('with the number ' + maskedCardNumber),
                                    variant: 'success', // 'success', 'warning', 'error', or 'info'
                                    mode: 'dismissible' // 'dismissable' or 'pester'
                                });
                                setTimeout(() => {
                                    this.currentStepRequestIndicator = "3";
                                    this.barControllerArray[1][1]=this.currentStepRequestIndicator;
                                    this.error = false;
                                    this.barControllerArray[1][2]=this.error;
                                    this.dispatchEvent(cardAddedSuccessfully);
                                    this.hideLoader();
                                    setTimeout(() => {
                                        this.currentStepRequestIndicator = "1";
                                        this.barControllerArray[1][1]=this.currentStepRequestIndicator;
                                        this.template.querySelector('.card-number-input').value = '';
                                        this.template.querySelector('.card-cvv').value = '';
                                        this.template.querySelector('.expiry-data').value = '';
                                        this.outputCardNumber = 'XXXX-XXXX-XXXX-XXXX';
                                        this.outputMMYY = 'MM/YY';
                                        this.outputCVV = 'CVV';
                                    }, 2500);
                                }, 1200);
                                
                                console.log('Card AddModule End');
                            }
                            else {
                                console.log('Error Recieved');
                                const toastRequestRecievedError = new ShowToastEvent({
                                    title: this.resultdata.messages.message[0].code,
                                    message: this.resultdata.messages.message[0].text,
                                    variant: 'error', // 'success', 'warning', 'error', or 'info'
                                    mode: 'dismissible' // 'dismissable' or 'pester'
                                });
                                setTimeout(() => {
                                    this.currentStepRequestIndicator = "3";
                                    this.barControllerArray[1][1]=this.currentStepRequestIndicator;
                                    this.error = true;
                                    this.barControllerArray[1][2]=this.error;
                                    this.dispatchEvent(toastRequestRecievedError);
                                    this.hideLoader();
                                }, 1200);
                            }

                        }
                        else {
                            this.currentStepRequestIndicator = "2";
                            this.barControllerArray[1][1]=this.currentStepRequestIndicator;
                            this.error = true;
                            this.barControllerArray[1][2]=this.error;
                            this.hideLoader();
                        }
                        
                    })
                    .catch(error => {
                       
                        // Handle errors
                        const toastRequestRecievedError = new ShowToastEvent({
                            title: 'Error code: ' + error.status,
                            message: error.body.message,
                            variant: 'error', // 'success', 'warning', 'error', or 'info'
                            mode: 'dismissible' // 'dismissable' or 'pester'
                        });
                        this.error = true;
                        this.barControllerArray[1][2]=this.error;
                        this.dispatchEvent(toastRequestRecievedError);
                        console.error('Error fetching data: ', error);
                        this.hideLoader();
                    });
            }
            else if (currentGateway == 'Stripe') {
                console.log('In' + currentGateway);
                console.log(cardNumberInput);
                console.log(cardExpiryInput);
                console.log(cardCVVInput);
                // Call the Apex method when the "Fetch Data" button is clicked
                getStripeCardController({ cardNumber: cardNumberInput, cardExpirationDate: cardExpiryInput, cardCVV: cardCVVInput, accountId: this.account.fields.Id.value, type: currentGateway })
                    .then(result => {
                        this.currentStepRequestIndicator = "2";
                        this.barControllerArray[2][1]=this.currentStepRequestIndicator;
                        this.resultdata = result;
                        console.log(result);
                        if (this.resultdata != null || this.resultdata != undefined || this.resultdata != 'undefined') {
                            console.log('Response Recieved');
                            const responseRecievedSuccessfully = new ShowToastEvent({
                                title: 'Response Recieved Successfully!',
                                message: ('The response has been received.'),
                                variant: 'info', // 'success', 'warning', 'error', or 'info'
                                mode: 'dismissible' // 'dismissable' or 'pester'
                            });
                            this.dispatchEvent(responseRecievedSuccessfully);
                            this.currentStepRequestIndicator = "2";
                            this.barControllerArray[2][1]=this.currentStepRequestIndicator;
                            console.log('Response Recieved');
                            console.log('Message is :' + this.resultdata);
                            if (this.resultdata.error == null) {
                                console.log('Card Added Successfully');
                                console.log(cardNumberInput);
                                const maskedCardNumber = "xxxxxxxxxxxx" + cardNumberInput.toString().slice(-4);
                                console.log(maskedCardNumber);
                                const cardAddedSuccessfully = new ShowToastEvent({
                                    title: 'Card Added Successfully!',
                                    message: ('with the number ' + maskedCardNumber),
                                    variant: 'success', // 'success', 'warning', 'error', or 'info'
                                    mode: 'dismissible' // 'dismissable' or 'pester'
                                });
                                setTimeout(() => {
                                    this.currentStepRequestIndicator = "3";
                                    this.barControllerArray[2][1]=this.currentStepRequestIndicator;
                                    this.error = false;
                                    this.barControllerArray[2][2]=this.error;
                                    this.dispatchEvent(cardAddedSuccessfully);

                                    setTimeout(() => {
                                        this.currentStepRequestIndicator = "1";
                                        this.barControllerArray[2][1]=this.currentStepRequestIndicator;
                                        this.template.querySelector('.card-number-input').value = '';
                                        this.template.querySelector('.card-cvv').value = '';
                                        this.template.querySelector('.expiry-data').value = '';
                                        this.outputCardNumber = 'XXXX-XXXX-XXXX-XXXX';
                                        this.outputMMYY = 'MM/YY';
                                        this.outputCVV = 'CVV';
                                    }, 2500);
                                }, 1200);
                                console.log('Card AddModule End');
                            }
                            else {

                                console.log('Error Recieved');
                                const toastRequestRecievedError = new ShowToastEvent({
                                    title: this.resultdata.error.code,
                                    message: this.resultdata.error.message,
                                    variant: 'error', // 'success', 'warning', 'error', or 'info'
                                    mode: 'dismissible' // 'dismissable' or 'pester'
                                });
                                this.hideLoader();
                                setTimeout(() => {
                                    this.currentStepRequestIndicator = "3";
                                    this.barControllerArray[2][1]=this.currentStepRequestIndicator;
                                    this.error = true;
                                    this.barControllerArray[2][2]=this.error;
                                    this.dispatchEvent(toastRequestRecievedError);
                                }, 1200);
                            }

                        }
                        else {
                            this.currentStepRequestIndicator = "2";
                            this.barControllerArray[2][1]=this.currentStepRequestIndicator;
                            this.error = true;
                            this.barControllerArray[2][2]=this.error;
                            this.hideLoader();
                        }
                    })
                    .catch(error => {
                        // Handle errors
                        const toastRequestRecievedError = new ShowToastEvent({
                            title: 'Error code: ' + error.status,
                            message: error.body.message,
                            variant: 'error', // 'success', 'warning', 'error', or 'info'
                            mode: 'dismissible' // 'dismissable' or 'pester'
                        });
                        this.hideLoader();
                        this.error = true;
                        this.barControllerArray[2][2]=this.error;
                        this.dispatchEvent(toastRequestRecievedError);
                        console.error('Error fetching data: ', error);
                    });
                
            }

        }


        
    }


}